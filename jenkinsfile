
pipeline {
    agent any
    
    environment {
        // Repository configuration
        GIT_URL = 'https://github.com/codewithbab015/fnb-dataquest-recosys.git'
        GIT_CREDENTIALS_ID = 'jenkins_access_id'
        
        // MLOps tool configurations
        MLFLOW_TRACKING_URI = 'http://mlflow-server:5000'

        // Docker Hub configuration
        DOCKERHUB_CREDENTIALS_ID = 'docker_access_id'
        DOCKER_USERNAME = 'mrbaloyin'
        DOCKER_IMG = 'recosys-model' //Change the name of the image tag as needed
        VERSION = 'latest'

        // Python environment
        PIP_CACHE_DIR = "${WORKSPACE}/.pip_cache"
        VENV_DIR = "${WORKSPACE}/.venv"
    }
    
    stages {

        stage("üîÑ Source Control") {
            steps {
                script {
                    def utilsLib = load "jenkins/utils.groovy"
                    utilsLib.cloneRepository(env.GIT_URL, env.GIT_CREDENTIALS_ID)
                }
                sh '''
                    echo "‚úÖ Repository cloned successfully"
                    echo "üìä Commit: $(git rev-parse HEAD)"
                    echo "üåø Branch: $(git branch --show-current)"
                '''
            }
        }
        
        stage("Setup Env") {
            steps {
                script{
                    def utilsLib = load "jenkins/utils.groovy"
                    utilsLib.pythonEnvironment(env.VENV_DIR)
                }
            }
        }
    }
    
    post {
        always {
            archiveArtifacts artifacts: 'reports/**/*', allowEmptyArchive: true
            archiveArtifacts artifacts: 'models/**/*', allowEmptyArchive: true

            script {
                if (fileExists('**/test-results.xml')) {
                    publishTestResults testResultsPattern: '**/test-results.xml'
                } else {
                    echo "üü° No test result files found, skipping test results publishing"
                }

                if (fileExists('coverage.xml')) {
                    publishCoverage adapters: [coberturaAdapter('coverage.xml')]
                } else {
                    echo "üü° No coverage report found, skipping coverage publishing"
                }
            }

            sh '''
                echo "üßπ Cleaning up workspace"
                # conda deactivate || true
                # docker system prune -f || true
            '''
        }
        
        success {
            echo "‚úÖ Pipeline completed successfully!"
            // Send success notification
            sh '''
                echo "üìß Sending success notification"
                # python src/notifications/send_notification.py --status=success
            '''
        }
        
        failure {
            echo "‚ùå Pipeline failed!"
            // Send failure notification
            sh '''
                echo "üìß Sending failure notification"
                # python src/notifications/send_notification.py --status=failure
            '''
        }
        
        unstable {
            echo "‚ö†Ô∏è Pipeline completed with warnings"
            // Send warning notification
            sh '''
                echo "üìß Sending warning notification"
                # python src/notifications/send_notification.py --status=warning
            '''
        }
    }
}