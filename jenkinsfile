pipeline {
    agent any
    
    environment {
        // Repository configuration
        GIT_URL = 'https://github.com/codewithbab015/fnb-dataquest-recosys.git'
        GIT_CREDENTIALS_ID = 'jenkins_access_id'
        
        // MLOps tool configurations
        MLFLOW_TRACKING_URI = 'http://mlflow-server:5000'

        // Docker Hub configuration
        DOCKERHUB_CREDENTIALS_ID = 'docker_access_id'
        DOCKER_USERNAME = 'mrbaloyin'
        DOCKER_IMG = 'recosys-model' //Change the name of the image tag as needed
        VERSION = 'latest'

        // Python environment
        PIP_CACHE_DIR = "${WORKSPACE}/.pip_cache"
        VENV_DIR = "${WORKSPACE}/.venv"
    }
    
    stages {

        stage('Load Pipeline Libraries') {
            steps {
                script {
                    // Load shared libraries dynamically from workspace
                    // Ensure that these libraries existing in the jenkins/ folder
                    // utilsLib  = load "jenkins/utils.groovy"
                    // testLib   = load "jenkins/test.groovy"
                    // buildLib  = load "jenkins/build.groovy"
                    // deployLib = load "jenkins/deploy.groovy"

                    echo "‚úÖ All pipeline libraries loaded successfully"
                }
            }
        }

        stage("üîÑ Source Control") {
            steps {
                script {
                    // Clone repository with specific branch/tag
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/main']],
                        userRemoteConfigs: [[
                            url: "${GIT_URL}",
                            credentialsId: "${GIT_CREDENTIALS_ID}"
                        ]]
                    ])
                }
                sh '''
                    echo "‚úÖ Repository cloned successfully"
                    echo "üìä Commit: $(git rev-parse HEAD)"
                    echo "üåø Branch: $(git branch --show-current)"
                '''
            }
        }
        
        stage("Setup Env") {
            steps {
                sh '''
                    echo "üêç Setting up Python environment"
                    # Create conda environment if not exists
                    # conda create -n ${VENV_DIR} python=${PYTHON_VERSION} -y || true
                    #conda activate ${VENV_DIR}
                    
                    # Install dependencies
                    # pip install -r requirements.txt
                    
                    # Install development dependencies
                    # pip install pytest black flake8 pre-commit
                    
                    echo "‚úÖ Environment setup complete"
                '''
            }
        }
        
        stage("üîç Code Quality & Security") {
            parallel {
                stage("Code Linting") {
                    steps {
                        sh '''
                            echo "üßπ Running code linting"
                            # conda activate ${VENV_DIR}
                            # flake8 src/ --max-line-length=88 --exclude=__pycache__
                            # black --check src/
                        '''
                    }
                }
                stage("Security Scan") {
                    steps {
                        sh '''
                            echo "üîê Running security scan"
                            # conda activate ${VENV_DIR}
                            # bandit -r src/ -f json -o security-report.json
                            # safety check --json --output safety-report.json
                        '''
                    }
                }
                stage("Unit Tests") {
                    steps {
                        sh '''
                            echo "üß™ Running unit tests"
                            # conda activate ${VENV_DIR}
                            # pytest tests/unit/ -v --junitxml=unit-test-results.xml --cov=src --cov-report=xml
                        '''
                    }
                }
            }
        }
        
        stage("üìä Data Pipeline") {
            stages {
                stage("Data Validation") {
                    steps {
                        sh '''
                            echo "üîç Validating data quality and schema"
                            # conda activate ${VENV_DIR}
                            # python src/data/validate_data.py
                            
                            # Check data drift
                            # python src/data/detect_drift.py
                            
                            # Generate data quality report
                            # python src/data/data_quality_report.py
                        '''
                    }
                }
                stage("Data Preprocessing") {
                    steps {
                        sh '''
                            echo "üõ†Ô∏è Preprocessing and feature engineering"
                            # conda activate ${VENV_DIR}
                            # python src/data/preprocess.py
                            
                            # Feature engineering
                            # python src/features/build_features.py
                            
                            # Data splitting
                            # python src/data/split_data.py
                        '''
                    }
                }
                stage("Data Profiling") {
                    steps {
                        sh '''
                            echo "üìà Generating data profile and statistics"
                            # conda activate ${VENV_DIR}
                            # python src/data/profile_data.py
                            
                            # Generate data lineage
                            # python src/data/track_lineage.py
                        '''
                    }
                }
            }
        }
        
        stage("ü§ñ Model Development") {
            stages {
                stage("Experiment Tracking Setup") {
                    steps {
                        sh '''
                            echo "üìã Setting up experiment tracking"
                            # conda activate ${VENV_DIR}
                            # export MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}
                            
                            # Create experiment if not exists
                            # python src/models/setup_experiment.py
                        '''
                    }
                }
                stage("Model Training") {
                    parallel {
                        stage("Baseline Model") {
                            steps {
                                sh '''
                                    echo "üèÅ Training baseline model"
                                    # conda activate ${VENV_DIR}
                                    # python src/models/train_baseline.py
                                '''
                            }
                        }
                        stage("Advanced Models") {
                            steps {
                                sh '''
                                    echo "üöÄ Training advanced models"
                                    # conda activate ${VENV_DIR}
                                    # python src/models/train_models.py
                                '''
                            }
                        }
                    }
                }
                stage("Hyperparameter Optimization") {
                    steps {
                        sh '''
                            echo "‚öôÔ∏è Optimizing hyperparameters"
                            # conda activate ${VENV_DIR}
                            # python src/models/hyperparameter_tuning.py
                            
                            # Run automated hyperparameter search
                            # python src/models/optuna_optimization.py
                        '''
                    }
                }
                stage("Cross Validation") {
                    steps {
                        sh '''
                            echo "üîÑ Performing cross-validation"
                            # conda activate ${VENV_DIR}
                            # python src/models/cross_validation.py
                            
                            # Time series cross-validation if applicable
                            # python src/models/time_series_cv.py
                        '''
                    }
                }
            }
        }
        
        stage("üß™ Model Validation") {
            stages {
                stage("Model Evaluation") {
                    steps {
                        sh '''
                            echo "üìä Evaluating model performance"
                            # conda activate ${VENV_DIR}
                            # python src/models/evaluate_model.py
                            
                            # Generate model performance report
                            #  python src/models/generate_report.py
                        '''
                    }
                }
                stage("Model Interpretability") {
                    steps {
                        sh '''
                            echo "üîç Analyzing model interpretability"
                            # conda activate ${VENV_DIR}
                            # python src/models/explain_model.py
                            
                            # Generate SHAP values
                            # python src/models/shap_analysis.py
                        '''
                    }
                }
                stage("Bias & Fairness Testing") {
                    steps {
                        sh '''
                            echo "‚öñÔ∏è Testing for bias and fairness"
                            # conda activate ${VENV_DIR}
                            # python src/models/bias_testing.py
                            
                            # Fairness metrics
                            # python src/models/fairness_metrics.py
                        '''
                    }
                }
                stage("Prediction Testing") {
                    parallel {
                        stage("Batch Predictions") {
                            steps {
                                sh '''
                                    echo "üì¶ Testing batch predictions"
                                    # conda activate ${VENV_DIR}
                                    # python src/models/test_batch_predictions.py
                                    
                                    # Performance benchmarking
                                    # python src/models/benchmark_performance.py
                                '''
                            }
                        }
                        stage("Real-time Predictions") {
                            steps {
                                sh '''
                                    echo "‚ö° Testing real-time predictions"
                                    # conda activate ${VENV_DIR}
                                    # python src/models/test_realtime_predictions.py
                                    
                                    # Latency testing
                                    # python src/models/latency_testing.py
                                '''
                            }
                        }
                    }
                }
            }
        }
        
        stage("üèÜ Model Selection & Registration") {
            steps {
                sh '''
                    echo "üéØ Selecting best model and registering"
                    # conda activate ${VENV_DIR}
                    # export MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}
                    
                    # Compare models and select best
                    # python src/models/model_selection.py
                    
                    # Register model in MLflow
                    # python src/models/register_model.py
                    
                    # Model versioning
                    # python src/models/version_model.py
                '''
            }
        }
        
        stage("üöÄ Model Deployment") {
            stages {
                stage("Model Packaging") {
                    steps {
                        sh '''
                            echo "üì¶ Packaging model for deployment"
                            # conda activate ${VENV_DIR}
                            
                            # Create Docker image
                            # docker build -t ${DOCKER_REGISTRY}/${MODEL_NAME}:${BUILD_NUMBER} .
                            
                            # Run container tests
                            # python src/deployment/test_container.py
                        '''
                    }
                }
                stage("Staging Deployment") {
                    steps {
                        sh '''
                            echo "üé≠ Deploying to staging environment"
                            # conda activate ${VENV_DIR}
                            
                            # Deploy to staging
                            # python src/deployment/deploy_staging.py
                            
                            # Smoke tests
                            # python src/deployment/smoke_tests.py
                        '''
                    }
                }
                stage("Integration Testing") {
                    steps {
                        sh '''
                            echo "üîó Running integration tests"
                            # conda activate ${VENV_DIR}
                            
                            # End-to-end testing
                            # python src/tests/test_integration.py
                            
                            # Load testing
                            # python src/tests/load_testing.py
                        '''
                    }
                }
                stage("Production Deployment") {
                    when {
                        branch 'main'
                    }
                    steps {
                        script {
                            // Add approval step for production deployment
                            input message: 'Deploy to production?', ok: 'Deploy'
                        }
                        sh '''
                            echo "üåü Deploying to production"
                            # conda activate ${VENV_DIR}
                            
                            # Blue-green deployment
                            # python src/deployment/deploy_production.py
                            
                            # Health checks
                            # python src/deployment/health_checks.py
                            
                            # Update model registry status
                            # python src/deployment/update_model_status.py
                        '''
                    }
                }
            }
        }
        
        stage("üìä Post-Deployment") {
            parallel {
                stage("Model Monitoring Setup") {
                    steps {
                        sh '''
                            echo "üëÅÔ∏è Setting up model monitoring"
                            # conda activate ${VENV_DIR}
                            
                            # Setup monitoring dashboards
                            # python src/monitoring/setup_monitoring.py
                            
                            # Configure alerts
                            # python src/monitoring/configure_alerts.py
                        '''
                    }
                }
                stage("Documentation") {
                    steps {
                        sh '''
                            echo "üìö Generating documentation"
                            # conda activate ${VENV_DIR}
                            
                            # Generate model cards
                            # python src/documentation/generate_model_card.py
                            
                            # API documentation
                            # python src/documentation/generate_api_docs.py
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            // Archive artifacts
            archiveArtifacts artifacts: 'reports/**/*', allowEmptyArchive: true
            archiveArtifacts artifacts: 'models/**/*', allowEmptyArchive: true
            
            // Publish test results
            publishTestResults testResultsPattern: '**/test-results.xml'
            publishCoverage adapters: [coberturaAdapter('coverage.xml')]
            
            // Clean up
            sh '''
                echo "üßπ Cleaning up workspace"
                # conda deactivate || true
                # docker system prune -f || true
            '''
        }
        
        success {
            echo "‚úÖ Pipeline completed successfully!"
            // Send success notification
            sh '''
                echo "üìß Sending success notification"
                # python src/notifications/send_notification.py --status=success
            '''
        }
        
        failure {
            echo "‚ùå Pipeline failed!"
            // Send failure notification
            sh '''
                echo "üìß Sending failure notification"
                # python src/notifications/send_notification.py --status=failure
            '''
        }
        
        unstable {
            echo "‚ö†Ô∏è Pipeline completed with warnings"
            // Send warning notification
            sh '''
                echo "üìß Sending warning notification"
                # python src/notifications/send_notification.py --status=warning
            '''
        }
    }
}