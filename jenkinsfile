pipeline {
    agent {
        docker {
            image 'python:3.10-slim'
            args '-v jenkins-pip-cache:/root/.cache/pip'
        }
    }

    environment {
        // Repository configuration
        GIT_URL = 'https://github.com/codewithbab015/fnb-dataquest-recosys.git'
        GIT_CREDENTIALS_ID = 'jenkins_access_id'

        // MLOps tool configurations
        MLFLOW_TRACKING_URI = 'http://mlflow-server:5000'

        // Docker Hub configuration
        DOCKERHUB_CREDENTIALS_ID = 'docker_access_id'
        DOCKER_USERNAME = 'mrbaloyin'
        DOCKER_IMG = 'recosys-model'
        VERSION = 'latest'

        // Python environment
        VENV_DIR = "${WORKSPACE}/.venv"
    }

    stages {
        stage("Source Control") {
            steps {
                script {
                    def utilsLib = load "jenkins/utils.groovy"
                    utilsLib.cloneRepository(env.GIT_URL, env.GIT_CREDENTIALS_ID)
                }
                sh '''
                    echo "Repository cloned successfully"
                    echo "Commit: $(git rev-parse HEAD)"
                    echo "Branch: $(git branch --show-current)"
                '''
            }
        }

        stage('Cache Dependencies') {
            steps {
                sh '''
                    export PIP_CACHE_DIR=/root/.cache/pip
                    pip install --upgrade pip
                    pip install -r requirements.txt
                '''
            }
        }

        stage("Setup Python Environment") {
            steps {
                sh 'python3 --version'
            }
        }
    }

    post {
        always {
            // Wrap file-based steps in node to ensure FilePath context
            node {
                script {
                    if (fileExists('reports/')) {
                        archiveArtifacts artifacts: 'reports/**/*', allowEmptyArchive: true
                    }
                    if (fileExists('models/')) {
                        archiveArtifacts artifacts: 'models/**/*', allowEmptyArchive: true
                    }

                    if (fileExists('**/test-results.xml')) {
                        publishTestResults testResultsPattern: '**/test-results.xml'
                    } else {
                        echo "No test result files found. Skipping test results publishing."
                    }

                    if (fileExists('coverage.xml')) {
                        publishCoverage adapters: [coberturaAdapter('coverage.xml')]
                    } else {
                        echo "No coverage report found. Skipping coverage publishing."
                    }
                }

                sh '''
                    echo "Cleaning up workspace"
                    rm -rf .venv || true
                    # Do not remove /cache to preserve pip cache
                '''
            }
        }

        success {
            sh '''
                echo "Pipeline completed successfully."
                # python src/notifications/send_notification.py --status=success
            '''
        }

        failure {
            sh '''
                echo "Pipeline failed."
                # python src/notifications/send_notification.py --status=failure
            '''
        }

        unstable {
            sh '''
                echo "Pipeline completed with warnings."
                # python src/notifications/send_notification.py --status=warning
            '''
        }
    }
}
